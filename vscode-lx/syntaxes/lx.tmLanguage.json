{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Lx",
  "scopeName": "source.lx",
  "patterns": [
    {
      "include": "#constant"
    },
    {
      "include": "#comment"
    },
    {
      "include": "#string"
    },
    {
      "include": "#entity"
    },
    {
      "include": "#keyword"
    },
    {
      "include": "#operator"
    },
    {
      "include": "#punctuation"
    },
    {
      "include": "#storage"
    },
    {
      "include": "#support"
    },
    {
      "include": "#type"
    },
    {
      "include": "#variable"
    }
  ],
  "repository": {
    "constant": {
      "patterns": [
        {
          "name": "constant.language.lx",
          "match": "\\b(nil|true|false)\\b(?![?!])"
        },
        {
          "name": "constant.numeric.lx",
          "match": "\\b(0[xX]\\h(?>_?\\h)*|\\d(?>_?\\d)*(\\.(?![^[:space:][:digit:]])(?>_?\\d)*)?([eE][-+]?\\d(?>_?\\d)*)?|0[bB][01]+)\\b"
        },
        {
          "comment": "atoms",
          "captures": {
            "1": {
              "name": "punctuation.definition.constant.lx"
            }
          },
          "match": "(:)(?>[a-zA-Z_][\\w@]*(?>[?!]|=(?![>=]))?|\\<\\>|===?|!==?|<<>>|<<<|>>>|~~~|::|<\\-|\\|>|=>|~|~=|=|/|\\\\\\\\|\\*\\*?|\\.\\.?\\.?|>=?|<=?|&&?&?|\\+\\+?|\\-\\-?|\\|\\|?\\|?|\\!|@|\\%?\\{\\}|%|\\[\\]|\\^(\\^\\^)?)",
          "name": "constant.other.symbol.lx"
        }
      ]
    },
    "comment": {
      "patterns": [
        {
          "name": "comment.line.number-sign.lx",
          "begin": "#",
          "end": "\\n",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.comment.lx"
            }
          }
        }
      ]
    },
    "entity": {
      "patterns": [
        {
          "name": "entity.name.function.lx",
          "match": "[a-zA-Z0-9_?!]+(?=[(])"
        },
        {
          "captures": {
            "1": {
              "name": "keyword.control.module.lx"
            },
            "2": {
              "name": "entity.name.type.module.lx"
            }
          },
          "match": "^\\s*(record)\\s+(([A-Z]\\w*\\s*(\\.)\\s*)*[A-Z]\\w*)"
        }
      ]
    },
    "keyword": {
      "patterns": [
        {
          "comment": "Function definitions",
          "match": "\\b(fun|pub)\\b\\s*([_$a-z][$\\w]*[!?]?)",
          "captures": {
            "1": {
              "name": "keyword.control.function.lx"
            },
            "2": {
              "name": "entity.name.function.lx"
            }
          }
        },
        {
          "name": "keyword.control.conditional.lx",
          "match": "\\b(if|else|case|when)\\b(?![?!])"
        },
        {
          "name": "keyword.control.loop.lx",
          "match": "\\b(for|after)\\b(?![?!])"
        },
        {
          "name": "keyword.control.concurrency.lx",
          "match": "\\b(receive|unsafe)\\b(?![?!])"
        },
        {
          "name": "keyword.control.otp.lx",
          "match": "\\b(worker|supervisor|strategy|children|one_for_one|one_for_one|one_for_all|rest_for_one)\\b(?![?!])"
        },
        {
          "name": "keyword.control.specification.lx",
          "match": "\\b(spec|requires|ensures|matches)\\b(?![?!])"
        },
        {
          "name": "keyword.control.testing.lx",
          "match": "\\b(describe|test|assert)\\b(?![?!])"
        },
        {
          "name": "keyword.control.project.lx",
          "match": "\\b(deps|application)\\b(?![?!])"
        },
        {
          "name": "keyword.control.other.lx",
          "match": "\\b(do|end)\\b(?![?!])"
        },
        {
          "comment": "typespec Lx",
          "match": "\\s*(::)\\s*([%\\w{}:.,|]+(?:\\s*\\|\\s*[^\\s]+)*)",
          "captures": {
            "1": {
              "name": "constant.language.symbol.lx"
            },
            "2": {
              "name": "entity.name.type.lx"
            }
          }
        }
      ]
    },
    "operator": {
      "patterns": [
        {
          "match": "->",
          "name": "keyword.operator.arrow.lx"
        },
        {
          "match": "=>",
          "name": "keyword.operator.big-arrow.lx"
        },
        {
          "match": "<-",
          "name": "keyword.operator.pattern.lx"
        },
        {
          "match": "=",
          "name": "keyword.operator.assignment.lx"
        },
        {
          "match": "!",
          "name": "keyword.operator.send.lx"
        },
        {
          "match": "::",
          "name": "keyword.operator.type.lx"
        },
        {
          "match": "\\+\\+",
          "name": "keyword.operator.concat.lx"
        },
        {
          "match": "\\|",
          "name": "keyword.operator.update.lx"
        },
        {
          "comment": "matches: ++ -- ** \\ <- <> << >> :: .. |> => -> <|> <~> <~ <<~ ~> ~>>",
          "match": "\\+\\+|\\-\\-|\\*\\*|\\\\\\\\|\\<\\-|<\\<\\~|\\<\\>|\\<\\<|\\>\\>|\\:\\:|\\.\\.|\\|>|=>|<\\|\\>|<~>|->|~>>|~>|<~|(?<!\\|)\\|(?!\\|)",
          "name": "keyword.operator.other.lx"
        },
        {
          "match": "===?|!==?|<=?|>=?|=~",
          "name": "keyword.operator.comparison.lx"
        },
        {
          "match": "(?<=[ \\t])!+|\\bnot\\b|&&|\\band\\b|\\|\\||\\bor\\b|\\bxor\\b|\\bandalso\\b|\\borelse\\b",
          "name": "keyword.operator.logical.lx"
        },
        {
          "match": "(\\*|\\+|\\-|/)",
          "name": "keyword.operator.arithmetic.lx"
        }
      ]
    },
    "punctuation": {
      "patterns": [
        {
          "match": "\\;",
          "name": "punctuation.separator.statement.lx"
        },
        {
          "match": ",",
          "name": "punctuation.separator.object.lx"
        },
        {
          "match": "\\.",
          "name": "punctuation.separator.method.lx"
        },
        {
          "match": "\\{|\\}",
          "name": "punctuation.section.scope.lx"
        },
        {
          "match": "\\[\\]|\\[|\\]",
          "name": "punctuation.section.array.lx"
        },
        {
          "match": ":",
          "name": "punctuation.separator.other.lx"
        },
        {
          "match": "\\(|\\)",
          "name": "punctuation.section.function.lx"
        }
      ]
    },
    "storage": {
      "patterns": [
        {
          "name": "storage.type.lx",
          "match": "\\b(record|worker|supervisor|spec)\\b"
        },
        {
          "name": "storage.type.record.lx",
          "match": "[A-Z][_a-zA-Z0-9]*\\s*\\{"
        }
      ]
    },
    "support": {
      "patterns": [
        {
          "name": "support.class.module.lx",
          "match": "\\b[a-z][a-zA-Z0-9_]*\\."
        }
      ]
    },
    "type": {
      "patterns": [
        {
          "name": "entity.name.type.lx",
          "match": "\\b(string|integer|boolean|float|list|map|tuple|atom|binary|any)\\b"
        }
      ]
    },
    "string": {
      "patterns": [
        {
          "comment": "double quoted string",
          "name": "string.quoted.double.lx",
          "begin": "\"",
          "end": "\"|\\n",
          "patterns": [
            {
              "match": "\\\\(?:[0-7]{1,3}|x[\\da-fA-F]{1,2}|.)",
              "name": "constant.character.escape.lx"
            }
          ]
        }
      ]
    },
    "variable": {
      "patterns": [
        {
          "begin": "\\(",
          "end": "\\)",
          "beginCaptures": {
            "0": {
              "name": "punctuation.section.function.lx"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.section.function.lx"
            }
          },
          "patterns": [
            {
              "include": "$self"
            },
            {
              "name": "variable.other.param.lx",
              "match": "[a-zA-Z]([a-zA-Z0-9_]+)?"
            }
          ]
        },
        {
          "name": "variable.other.access.lx",
          "match": "([a-zA-Z_][a-zA-Z0-9_]+)(?=\\[)"
        },
        {
          "name": "variable.other.record-field.lx",
          "match": "\\.([a-zA-Z_][a-zA-Z0-9_]*)"
        },
        {
          "name": "variable.other.map-key.lx",
          "match": "([a-zA-Z_][a-zA-Z0-9_]*):"
        },
        {
          "name": "variable.other.map-key-string.lx",
          "match": "\"[^\"]+\"\\s*=>"
        },
        {
          "name": "variable.other.ex",
          "match": "[a-zA-Z_]\\w+(?=:)"
        },
        {
          "name": "variable.language.lx",
          "match": "\\b(__MODULE__)\\b(?![?!])"
        },
        {
          "match": "(%)?\\b([A-Z]\\w+)\\b",
          "captures": {
            "1": {
              "name": "variable.other.constant.lx"
            },
            "2": {
              "name": "variable.other.constant.lx"
            }
          }
        }
      ]
    }
  }
}
