module kernel

@infix
def +(a :: integer, b :: integer) :: integer do
 ```erl
  ${a} + ${b}
 ```
end

@infix
def +(a :: float, b :: float) :: float do
 ```erl
  ${a} + ${b}
 ```
end

@infix
def -(a :: integer, b :: integer) :: integer do
 ```erl
  ${a} - ${b}
 ```
end

@infix
def -(a :: float, b :: float) :: float do
 ```erl
  ${a} - ${b}
 ```
end

@infix
def *(a :: integer, b :: integer) :: integer do
 ```erl
  ${a} * ${b}
 ```
end

@infix
def *(a :: float, b :: float) :: float do
 ```erl
  ${a} * ${b}
 ```
end

@infix
def /(a :: integer, b :: integer) :: integer do
 ```erl
  ${a} / ${b}
 ```
end

@infix
def /(a :: float, b :: float) :: float do
 ```erl
  ${a} / ${b}
 ```
end

@infix
def ==(a :: integer, b :: integer) :: boolean do
 ```erl
  ${a} == ${b}
 ```
end

@infix
def ==(a :: float, b :: float) :: boolean do
 ```erl
  ${a} == ${b}
 ```
end

@infix
def !=(a :: integer, b :: integer) :: boolean do
 ```erl
  ${a} != ${b}
 ```
end

@infix
def !=(a :: float, b :: float) :: boolean do
 ```erl
  ${a} != ${b}
 ```
end

@infix
def <(a :: integer, b :: integer) :: boolean do
 ```erl
  ${a} < ${b}
 ```
end

@infix
def <(a :: float, b :: float) :: boolean do
 ```erl
  ${a} < ${b}
 ```
end

@infix
def <=(a :: integer, b :: integer) :: boolean do
 ```erl
  ${a} <= ${b}
 ```
end

@infix
def <=(a :: float, b :: float) :: boolean do
 ```erl
  ${a} <= ${b}
 ```
end

@infix
def >(a :: integer, b :: integer) :: boolean do
 ```erl
  ${a} > ${b}
 ```
end

@infix
def >(a :: float, b :: float) :: boolean do
 ```erl
  ${a} > ${b}
 ```
end

@infix
def >=(a :: integer, b :: integer) :: boolean do
 ```erl
  ${a} >= ${b}
 ```
end

@infix
def >=(a :: float, b :: float) :: boolean do
 ```erl
  ${a} >= ${b}
 ```
end

@infix
def and(a :: boolean, b :: boolean) :: boolean do
 ```erl
  ${a} andalso ${b}
 ```
end

@infix
def or(a :: boolean, b :: boolean) :: boolean do
 ```erl
  ${a} orelse ${b}
 ```
end

@infix
def &&&(a :: integer, b :: integer) :: integer do
 ```erl
  ${a} band ${b}
 ```
end

@infix
def |||(a :: integer, b :: integer) :: integer do
 ```erl
  ${a} bor ${b}
 ```
end

@infix
def ^^^(a :: integer, b :: integer) :: integer do
 ```erl
  ${a} bxor ${b}
 ```
end

@infix
def <<<(a :: integer, b :: integer) :: integer do
 ```erl
  ${a} bsl ${b}
 ```
end

@infix
def >>>(a :: integer, b :: integer) :: integer do
 ```erl
  ${a} bsr ${b}
 ```
end
