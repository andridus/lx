# Example of OTP Worker with new callback syntax
# This demonstrates the new gen_server style callbacks

worker my_server {
  # Required init function - must have 1 parameter and return a tuple
  fun init(args) {
    {:ok, {count: 0, data: args}}
  }

  # handle_call - must have 3 parameters (Request, From, State) and return a tuple
  fun handle_call(get_count, from, state) {
    {:reply, state.count, state}
  }

  fun handle_call({increment, amount}, from, state) {
    new_count = state.count + amount
    new_state = {count: new_count, data: state.data}
    {:reply, new_count, new_state}
  }

  # handle_cast - must have 2 parameters (Request, State) and return a tuple
  fun handle_cast(reset, state) {
    new_state = {count: 0, data: state.data}
    {:noreply, new_state}
  }

  fun handle_cast({set_data, new_data}, state) {
    new_state = {count: state.count, data: new_data}
    {:noreply, new_state}
  }

  # handle_info - must have 2 parameters (Info, State) and return a tuple
  fun handle_info(timeout, state) {
    # Handle timeout messages
    {:noreply, state}
  }

  # terminate - must have 2 parameters (Reason, State) and return a tuple
  fun terminate(reason, state) {
    # Cleanup code here
    {:ok}
  }

  # code_change - must have 3 parameters (OldVsn, State, Extra) and return a tuple
  fun code_change(old_vsn, state, extra) {
    # Handle code upgrades
    {:ok, state}
  }

  # format_status - must have 1 parameter, can return anything
  fun format_status(status) {
    # Can return any format, not restricted to tuples
    "Server status: active"
  }

  # Regular helper functions (not OTP callbacks)
  fun helper_function(x, y) {
    x + y
  }
}

# Test examples
test "server should start correctly" {
  result = my_server.init([])
  assert result.0 == :ok
}

describe "server operations" {
  test "should handle get_count call" {
    state = {count: 5, data: nil}
    result = my_server.handle_call(get_count, nil, state)
    assert result.1 == 5
  }

  test "should handle increment call" {
    state = {count: 10, data: nil}
    result = my_server.handle_call({increment, 3}, nil, state)
    assert result.1 == 13
  }

  test "should handle reset cast" {
    state = {count: 100, data: "test"}
    result = my_server.handle_cast(reset, state)
    assert result.1.count == 0
  }
}